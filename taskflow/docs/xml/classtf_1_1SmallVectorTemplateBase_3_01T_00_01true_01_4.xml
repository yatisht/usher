<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4" kind="class" language="C++" prot="private">
    <compoundname>tf::SmallVectorTemplateBase&lt; T, true &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::SmallVectorTemplateCommon&lt; T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a6b9849e3fc0a0dbd6e30f8c69c7db935" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVectorTemplateBase&lt; T, true &gt;::SmallVectorTemplateBase</definition>
        <argsstring>(size_t Size)</argsstring>
        <name>SmallVectorTemplateBase</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="326" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1af4f15a8eb802cb9388356d5995eb70e1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateBase&lt; T, true &gt;::grow</definition>
        <argsstring>(size_t MinSize=0)</argsstring>
        <name>grow</name>
        <param>
          <type>size_t</type>
          <declname>MinSize</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Double the size of the allocated memory, guaranteeing space for at least one more element or MinSize if specified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="364" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="364" bodyend="366"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a1c3bcbc4c635b97d99ece152d8c3b29d" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void tf::SmallVectorTemplateBase&lt; T, true &gt;::destroy_range</definition>
        <argsstring>(T *, T *)</argsstring>
        <name>destroy_range</name>
        <param>
          <type>T *</type>
        </param>
        <param>
          <type>T *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="329" column="15" bodyfile="taskflow/utility/small_vector.hpp" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a736e3e5914675f5bbd9350b2351f0e54" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It1</type>
          </param>
          <param>
            <type>typename It2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void tf::SmallVectorTemplateBase&lt; T, true &gt;::uninitialized_move</definition>
        <argsstring>(It1 I, It1 E, It2 Dest)</argsstring>
        <name>uninitialized_move</name>
        <param>
          <type>It1</type>
          <declname>I</declname>
        </param>
        <param>
          <type>It1</type>
          <declname>E</declname>
        </param>
        <param>
          <type>It2</type>
          <declname>Dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the range [I, E) onto the uninitialized memory starting with &quot;Dest&quot;, constructing elements into it as needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="334" column="15" bodyfile="taskflow/utility/small_vector.hpp" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a92be65048cff5789a37b93e9c7f71e02" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It1</type>
          </param>
          <param>
            <type>typename It2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void tf::SmallVectorTemplateBase&lt; T, true &gt;::uninitialized_copy</definition>
        <argsstring>(It1 I, It1 E, It2 Dest)</argsstring>
        <name>uninitialized_copy</name>
        <param>
          <type>It1</type>
          <declname>I</declname>
        </param>
        <param>
          <type>It1</type>
          <declname>E</declname>
        </param>
        <param>
          <type>It2</type>
          <declname>Dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the range [I, E) onto the uninitialized memory starting with &quot;Dest&quot;, constructing elements into it as needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="342" column="15" bodyfile="taskflow/utility/small_vector.hpp" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a73f97021aca0b8f5b263abbb9346aa36" prot="protected" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void tf::SmallVectorTemplateBase&lt; T, true &gt;::uninitialized_copy</definition>
        <argsstring>(T1 *I, T1 *E, T2 *Dest, typename std::enable_if&lt; std::is_same&lt; typename std::remove_const&lt; T1 &gt;::type, T2 &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>uninitialized_copy</name>
        <param>
          <type>T1 *</type>
          <declname>I</declname>
        </param>
        <param>
          <type>T1 *</type>
          <declname>E</declname>
        </param>
        <param>
          <type>T2 *</type>
          <declname>Dest</declname>
        </param>
        <param>
          <type>typename <ref refid="cpp/types/enable_if" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::enable_if</ref>&lt; <ref refid="cpp/types/is_same" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::is_same</ref>&lt; typename <ref refid="cpp/types/remove_cv" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::remove_const</ref>&lt; T1 &gt;::type, T2 &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the range [I, E) onto the uninitialized memory starting with &quot;Dest&quot;, constructing elements into it as needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="350" column="15" bodyfile="taskflow/utility/small_vector.hpp" bodystart="350" bodyend="360"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1afd3661d5e240bf35cd814c486916ad8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateBase&lt; T, true &gt;::push_back</definition>
        <argsstring>(const T &amp;Elt)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="368" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="368" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a83dc7f432fa5eb3f6a69dd4c4eee1b89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateBase&lt; T, true &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="375" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="375" bodyend="377"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="1">
        <label>tf::SmallVectorTemplateBase&lt; T, true &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="1">
        <label>tf::SmallVectorTemplateBase&lt; T, true &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="taskflow/utility/small_vector.hpp" line="324" column="1" bodyfile="taskflow/utility/small_vector.hpp" bodystart="324" bodyend="378"/>
    <listofallmembers>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a009d8ff154f5ce94202db6c0591ce9e2" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a14a2f4a352c7ea71bea641125fa64c19" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a5022deed40c9c9f983230c38d99658f4" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af41e27410f801a6aef0e61173ed8c18d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a5d08aaf8e30cf35422fd5fc00a08365e" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>BeginX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a82d552c39834d18a03a5a7f62031aac3" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>capacity</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a11236e318bfb73ce440e6f29985b08f3" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>capacity_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae101bcc51df9f276a517b7634cc885d0" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6785a26fc28425df3fab4e06ccf436e3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a13c5c546448248a63e004725258f1ea3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>CapacityX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a39c4f2406153fd86003f67136e096bf1" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>const_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab2ca1203dec28f3d9c626c85b4f36448" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>const_pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ac60fb9e83232f170a2f1af419054b30d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>const_reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae8618ae79998e522734cf4b15fa7956e" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>const_reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a65c0541a7bf64e1ac4ae2a326d103cee" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6d3b04be0f7fef50e88269934c4f95cd" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a1c3bcbc4c635b97d99ece152d8c3b29d" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>destroy_range</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1adbfcf9d6ec0b239d48567a420a43b6f6" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>difference_type</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a538b6a18b5dfe80f650a2ada367a2050" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>empty</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a59e18797630dc06cef6c2ae5acf591a0" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0a34e20e970dce1f4e61893982886d49" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ac1a0459890042d10254b7be5dd7c1752" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>EndX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a2a1b3b20ba44906c4df269f6033c1f36" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0d17587a21aeba5f1230d183be131252" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1af4f15a8eb802cb9388356d5995eb70e1" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>grow</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a607fabb915c09ab97b1d80fb463e91fc" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a39b8b0b14783568a42fc606dee073096" prot="protected" virt="non-virtual" ambiguityscope="tf::SmallVectorBase::"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad541b208571c7244efc8fbe42b90d608" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>isSmall</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1acee58895a98d40868ce8f1a1ff284ab7" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab79607f378fcf2fa8772f02c95a73073" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>max_size</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a42143086f104cda6e3d2ed2a4f7f9a29" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af77ae362f96acd803ed7577fb48b5efd" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4762cde1bfad65cb37752b4df255ddab" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a83dc7f432fa5eb3f6a69dd4c4eee1b89" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>pop_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1afd3661d5e240bf35cd814c486916ad8b" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>push_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a83f50a1376ad1b3c828e89b9fa34b56d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a96c2d2979402cc76f84a76ff08720933" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4b9db31beb2fe6aef612cd8ce248eb4a" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae26b374c3ca4f75054eb17ec85b26cf0" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a411820e49d8ab402ac29c7537cd22049" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1aed80eb722677292606f4c4e3b14d9639" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>resetToSmall</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a20b7a8544e963fe20fd8a139bddce658" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae5fa1f3af9c829c120fd6ee9be5cf562" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>setEnd</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4416437b41cf9d57a6ed6b061e1cc1e8" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>size</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ab2a8fa067f915dc2b67c6e0c33527081" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>size_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0af2aaae74afd35894e91e96e221f2b4" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>size_type</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a326c733a440cd9a1197bed0f75892152" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>SmallVectorBase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a6b9849e3fc0a0dbd6e30f8c69c7db935" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>SmallVectorTemplateBase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4717897cb4e6fea34640801c69469355" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>SmallVectorTemplateCommon</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a92be65048cff5789a37b93e9c7f71e02" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>uninitialized_copy</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a73f97021aca0b8f5b263abbb9346aa36" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>uninitialized_copy</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_3_01T_00_01true_01_4_1a736e3e5914675f5bbd9350b2351f0e54" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>uninitialized_move</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad92ebf3b12a1cd9a7a80d5161cc4449b" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateBase&lt; T, true &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
