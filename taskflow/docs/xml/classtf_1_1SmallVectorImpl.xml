<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1SmallVectorImpl" kind="class" language="C++" prot="private">
    <compoundname>tf::SmallVectorImpl</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::SmallVectorTemplateBase&lt; T, IsPod&lt; T &gt;::value &gt;</basecompoundref>
    <derivedcompoundref refid="classtf_1_1SmallVector" prot="public" virt="non-virtual">tf::SmallVector&lt; Node * &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtf_1_1SmallVector" prot="public" virt="non-virtual">tf::SmallVector&lt; Node *, 4 &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtf_1_1SmallVector" prot="public" virt="non-virtual">tf::SmallVector&lt; tf::Semaphore * &gt;</derivedcompoundref>
    <derivedcompoundref refid="classtf_1_1SmallVector" prot="public" virt="non-virtual">tf::SmallVector&lt; T, N &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtf_1_1SmallVectorImpl_1aeb53b6c473df3c8278add81d71846718" prot="private" static="no">
        <type>SmallVectorTemplateBase&lt; T, IsPod&lt; T &gt;::value &gt;</type>
        <definition>typedef SmallVectorTemplateBase&lt;T, IsPod&lt;T&gt;::value&gt; tf::SmallVectorImpl&lt; T &gt;::SuperClass</definition>
        <argsstring></argsstring>
        <name>SuperClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="385" column="36" bodyfile="taskflow/utility/small_vector.hpp" bodystart="385" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtf_1_1SmallVectorImpl_1a56906d9b3af4322205884dccccda4557" prot="public" static="no">
        <type>SuperClass::iterator</type>
        <definition>typedef SuperClass::iterator tf::SmallVectorImpl&lt; T &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="390" column="41" bodyfile="taskflow/utility/small_vector.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorImpl_1a0214b0ea02db158851fdc27c726eb5c6" prot="public" static="no">
        <type>SuperClass::const_iterator</type>
        <definition>typedef SuperClass::const_iterator tf::SmallVectorImpl&lt; T &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="391" column="47" bodyfile="taskflow/utility/small_vector.hpp" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorImpl_1ad777bf745a771240340b41ef95b23f94" prot="public" static="no">
        <type>SuperClass::size_type</type>
        <definition>typedef SuperClass::size_type tf::SmallVectorImpl&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="392" column="42" bodyfile="taskflow/utility/small_vector.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a54467e7ac16f186941e384eb25557830" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVectorImpl&lt; T &gt;::SmallVectorImpl</definition>
        <argsstring>(const SmallVectorImpl &amp;)=delete</argsstring>
        <name>SmallVectorImpl</name>
        <param>
          <type>const SmallVectorImpl &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="387" column="3"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a7e9e271548156643b2a6066472a6901c" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVectorImpl&lt; T &gt;::SmallVectorImpl</definition>
        <argsstring>(unsigned N)</argsstring>
        <name>SmallVectorImpl</name>
        <param>
          <type>unsigned</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="396" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="396" bodyend="398"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a4ac1132c5abed54299b9c05f5a6c3a5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVectorImpl&lt; T &gt;::~SmallVectorImpl</definition>
        <argsstring>()</argsstring>
        <name>~SmallVectorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="401" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="401" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a0c4d7c6d68cdab50dd2e263dcb9338a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="411" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="411" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a3fd39cea3aa24104f31f051cc858ae31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::resize</definition>
        <argsstring>(size_type N)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="416" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="416" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1ab4b71ea99487d0561849b4ed9c32f493" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::resize</definition>
        <argsstring>(size_type N, const T &amp;NV)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>NV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="429" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="429" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a50e86216100abce0a02f758ec48dec26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::reserve</definition>
        <argsstring>(size_type N)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="441" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a787679e464d7605da42cfa51c932b357" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T tf::SmallVectorImpl&lt; T &gt;::pop_back_val</definition>
        <argsstring>()</argsstring>
        <name>pop_back_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="446" column="5" bodyfile="taskflow/utility/small_vector.hpp" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1ac79ba4c3607daede2f497cb7f14cc3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::swap</definition>
        <argsstring>(SmallVectorImpl &amp;RHS)</argsstring>
        <name>swap</name>
        <param>
          <type>SmallVectorImpl &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="452" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="740" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a7701c640b693502323a27937ad2433f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename in_iter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(in_iter in_start, in_iter in_end)</argsstring>
        <name>append</name>
        <param>
          <type>in_iter</type>
          <declname>in_start</declname>
        </param>
        <param>
          <type>in_iter</type>
          <declname>in_end</declname>
        </param>
        <briefdescription>
<para>Add the specified range to the end of the <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="456" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="456" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a945b8b7e14f3d535754323d85848f00c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(size_type NumInputs, const T &amp;Elt)</argsstring>
        <name>append</name>
        <param>
          <type>size_type</type>
          <declname>NumInputs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
<para>Add the specified range to the end of the <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="468" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="468" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a63bb5bb28bc13af096f7d0f750ca065d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="478" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1ac70567cd0a62080782399d6031f42fb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::assign</definition>
        <argsstring>(size_type NumElts, const T &amp;Elt)</argsstring>
        <name>assign</name>
        <param>
          <type>size_type</type>
          <declname>NumElts</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="482" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="482" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a3aac17a8dd8a5b05024e3bc3e588bf78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::assign</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="490" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="490" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a84bab9df70d6e59f3078da08280022c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::erase</definition>
        <argsstring>(const_iterator CI)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>CI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="495" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="495" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a5d28ee2577dc8da6d096235a3c67b587" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::erase</definition>
        <argsstring>(const_iterator CS, const_iterator CE)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>CS</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>CE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="510" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="510" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1ad0cd1dc5bdc5e85bd891d5e8cbf04aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, T &amp;&amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="528" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="528" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a67186df9203fbf6da88bb868768543e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, const T &amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="558" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="558" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1adef89d46d895560d98b9d2a8d5cf58c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, size_type NumToInsert, const T &amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>NumToInsert</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="587" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="587" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a2f1549f06d7d5899e5e5636c2b5836d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItTy</type>
          </param>
        </templateparamlist>
        <type>iterator</type>
        <definition>iterator tf::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, ItTy From, ItTy To)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>ItTy</type>
          <declname>From</declname>
        </param>
        <param>
          <type>ItTy</type>
          <declname>To</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="639" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="639" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a183b0273245a9e08281ecf3fcdd6c326" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="695" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="695" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a917970b8ad88f2782c0fdf610422229e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgTypes</declname>
            <defname>ArgTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::emplace_back</definition>
        <argsstring>(ArgTypes &amp;&amp;... Args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>ArgTypes &amp;&amp;...</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="699" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="699" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1aaec66ca9e10e70d11c194eecec877a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SmallVectorImpl &amp;</type>
        <definition>SmallVectorImpl&lt; T &gt; &amp; tf::SmallVectorImpl&lt; T &gt;::operator=</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type>const SmallVectorImpl &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="706" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="779" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a014f3cc0e83e01a42e621fc693ab7139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SmallVectorImpl &amp;</type>
        <definition>SmallVectorImpl&lt; T &gt; &amp; tf::SmallVectorImpl&lt; T &gt;::operator=</definition>
        <argsstring>(SmallVectorImpl &amp;&amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type>SmallVectorImpl &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="708" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="827" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a9d7b77ff6197e5c30cd0c267196f1ff6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::SmallVectorImpl&lt; T &gt;::operator==</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const SmallVectorImpl &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="710" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="710" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1a0d3239c335aaa933165c3da83e6544da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::SmallVectorImpl&lt; T &gt;::operator!=</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const SmallVectorImpl &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="714" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="714" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1af696392bdb0d114a8ead523260045e29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::SmallVectorImpl&lt; T &gt;::operator&lt;</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const SmallVectorImpl &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="718" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="718" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorImpl_1aa67a4c5e467bb19b1f16960854a0b010" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorImpl&lt; T &gt;::set_size</definition>
        <argsstring>(size_type N)</argsstring>
        <name>set_size</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the array size to <computeroutput>N</computeroutput>, which the current array must have enough capacity for.</para>
<para>This does not construct or destroy any elements in the vector.</para>
<para>Clients can use this in conjunction with capacity() to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="732" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="732" bodyend="735"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>tf::SmallVector&lt; tf::Semaphore * &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tf::SmallVectorImpl&lt; T &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>tf::SmallVector&lt; Node *, 4 &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="2">
        <label>tf::SmallVectorTemplateBase&lt; T, isPodLike &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>tf::SmallVector&lt; Node * &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>tf::SmallVector&lt; T, N &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tf::SmallVectorImpl&lt; T &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="2">
        <label>tf::SmallVectorTemplateBase&lt; T, isPodLike &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="taskflow/utility/small_vector.hpp" line="384" column="1" bodyfile="taskflow/utility/small_vector.hpp" bodystart="384" bodyend="736"/>
    <listofallmembers>
      <member refid="classtf_1_1SmallVectorImpl_1a7701c640b693502323a27937ad2433f4" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a945b8b7e14f3d535754323d85848f00c" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a63bb5bb28bc13af096f7d0f750ca065d" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ac70567cd0a62080782399d6031f42fb3" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>assign</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a3aac17a8dd8a5b05024e3bc3e588bf78" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>assign</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a009d8ff154f5ce94202db6c0591ce9e2" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a14a2f4a352c7ea71bea641125fa64c19" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a5022deed40c9c9f983230c38d99658f4" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af41e27410f801a6aef0e61173ed8c18d" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a5d08aaf8e30cf35422fd5fc00a08365e" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>BeginX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a82d552c39834d18a03a5a7f62031aac3" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>capacity</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a11236e318bfb73ce440e6f29985b08f3" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>capacity_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae101bcc51df9f276a517b7634cc885d0" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6785a26fc28425df3fab4e06ccf436e3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a13c5c546448248a63e004725258f1ea3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>CapacityX</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0c4d7c6d68cdab50dd2e263dcb9338a5" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>clear</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0214b0ea02db158851fdc27c726eb5c6" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>const_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab2ca1203dec28f3d9c626c85b4f36448" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>const_pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ac60fb9e83232f170a2f1af419054b30d" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>const_reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae8618ae79998e522734cf4b15fa7956e" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>const_reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a65c0541a7bf64e1ac4ae2a326d103cee" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6d3b04be0f7fef50e88269934c4f95cd" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a00ebcf9e81eed0b433be97131fd3d1d1" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>destroy_range</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1adbfcf9d6ec0b239d48567a420a43b6f6" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>difference_type</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a917970b8ad88f2782c0fdf610422229e" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>emplace_back</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a538b6a18b5dfe80f650a2ada367a2050" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>empty</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a59e18797630dc06cef6c2ae5acf591a0" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0a34e20e970dce1f4e61893982886d49" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ac1a0459890042d10254b7be5dd7c1752" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>EndX</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a84bab9df70d6e59f3078da08280022c8" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>erase</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a5d28ee2577dc8da6d096235a3c67b587" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>erase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a2a1b3b20ba44906c4df269f6033c1f36" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0d17587a21aeba5f1230d183be131252" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1ab804c48d808741a114c698847860d64c" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>grow</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a607fabb915c09ab97b1d80fb463e91fc" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a39b8b0b14783568a42fc606dee073096" prot="protected" virt="non-virtual" ambiguityscope="tf::SmallVectorBase::"><scope>tf::SmallVectorImpl</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ad0cd1dc5bdc5e85bd891d5e8cbf04aa6" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a67186df9203fbf6da88bb868768543e3" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1adef89d46d895560d98b9d2a8d5cf58c7" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a2f1549f06d7d5899e5e5636c2b5836d2" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a183b0273245a9e08281ecf3fcdd6c326" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad541b208571c7244efc8fbe42b90d608" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>isSmall</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a56906d9b3af4322205884dccccda4557" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab79607f378fcf2fa8772f02c95a73073" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>max_size</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0d3239c335aaa933165c3da83e6544da" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator!=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1af696392bdb0d114a8ead523260045e29" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator&lt;</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1aaec66ca9e10e70d11c194eecec877a1e" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a014f3cc0e83e01a42e621fc693ab7139" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a9d7b77ff6197e5c30cd0c267196f1ff6" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator==</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a42143086f104cda6e3d2ed2a4f7f9a29" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af77ae362f96acd803ed7577fb48b5efd" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4762cde1bfad65cb37752b4df255ddab" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1aaa3d3554c2ae0be47eed43c324e5e73b" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>pop_back</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a787679e464d7605da42cfa51c932b357" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>pop_back_val</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a6b7c01c4c054379358315a1aac0d49a7" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>push_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a6509b362398934d6ceed4a74ad0e6547" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>push_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a83f50a1376ad1b3c828e89b9fa34b56d" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a96c2d2979402cc76f84a76ff08720933" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4b9db31beb2fe6aef612cd8ce248eb4a" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae26b374c3ca4f75054eb17ec85b26cf0" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a411820e49d8ab402ac29c7537cd22049" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a50e86216100abce0a02f758ec48dec26" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>reserve</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1aed80eb722677292606f4c4e3b14d9639" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>resetToSmall</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a3fd39cea3aa24104f31f051cc858ae31" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>resize</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ab4b71ea99487d0561849b4ed9c32f493" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>resize</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a20b7a8544e963fe20fd8a139bddce658" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1aa67a4c5e467bb19b1f16960854a0b010" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>set_size</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae5fa1f3af9c829c120fd6ee9be5cf562" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>setEnd</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4416437b41cf9d57a6ed6b061e1cc1e8" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>size</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ab2a8fa067f915dc2b67c6e0c33527081" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>size_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ad777bf745a771240340b41ef95b23f94" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>size_type</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a326c733a440cd9a1197bed0f75892152" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SmallVectorBase</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a54467e7ac16f186941e384eb25557830" prot="private" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SmallVectorImpl</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a7e9e271548156643b2a6066472a6901c" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SmallVectorImpl</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1adc772391e02b84d14f4c5513542b29a9" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SmallVectorTemplateBase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4717897cb4e6fea34640801c69469355" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SmallVectorTemplateCommon</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1aeb53b6c473df3c8278add81d71846718" prot="private" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>SuperClass</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ac79ba4c3607daede2f497cb7f14cc3cb" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>swap</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1ab8738fe3287f4ef437fe7363e8ae2d60" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>uninitialized_copy</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1adf1b336ce5b5f404de1bb43c354fe1dd" prot="protected" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>uninitialized_move</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad92ebf3b12a1cd9a7a80d5161cc4449b" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>value_type</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a4ac1132c5abed54299b9c05f5a6c3a5e" prot="public" virt="non-virtual"><scope>tf::SmallVectorImpl</scope><name>~SmallVectorImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
