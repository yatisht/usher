<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1SmallVectorTemplateCommon" kind="class" language="C++" prot="private">
    <compoundname>tf::SmallVectorTemplateCommon</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::SmallVectorBase</basecompoundref>
    <derivedcompoundref refid="classtf_1_1SmallVectorTemplateBase" prot="public" virt="non-virtual">tf::SmallVectorTemplateBase&lt; T, IsPod&lt; T &gt;::value &gt;</derivedcompoundref>
    <innerclass refid="structtf_1_1SmallVectorTemplateCommon_1_1AlignedUnionType" prot="private">tf::SmallVectorTemplateCommon::AlignedUnionType</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a858a012ef160a4d227a5c1ddb1f56472" prot="private" static="no">
        <type>AlignedUnionType&lt; T &gt;</type>
        <definition>typedef AlignedUnionType&lt;T&gt; tf::SmallVectorTemplateCommon&lt; T, typename &gt;::U</definition>
        <argsstring></argsstring>
        <name>U</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="134" column="28" bodyfile="taskflow/utility/small_vector.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a0af2aaae74afd35894e91e96e221f2b4" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t tf::SmallVectorTemplateCommon&lt; T, typename &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="160" column="18" bodyfile="taskflow/utility/small_vector.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1adbfcf9d6ec0b239d48567a420a43b6f6" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>typedef ptrdiff_t tf::SmallVectorTemplateCommon&lt; T, typename &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="161" column="21" bodyfile="taskflow/utility/small_vector.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1ad92ebf3b12a1cd9a7a80d5161cc4449b" prot="public" static="no">
        <type>T</type>
        <definition>typedef T tf::SmallVectorTemplateCommon&lt; T, typename &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="162" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1acee58895a98d40868ce8f1a1ff284ab7" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* tf::SmallVectorTemplateCommon&lt; T, typename &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="163" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a39c4f2406153fd86003f67136e096bf1" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* tf::SmallVectorTemplateCommon&lt; T, typename &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="164" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1ae8618ae79998e522734cf4b15fa7956e" prot="public" static="no">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::reverse_iterator</ref>&lt; const_iterator &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; tf::SmallVectorTemplateCommon&lt; T, typename &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="166" column="33" bodyfile="taskflow/utility/small_vector.hpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a20b7a8544e963fe20fd8a139bddce658" prot="public" static="no">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::reverse_iterator</ref>&lt; iterator &gt;</type>
        <definition>typedef std::reverse_iterator&lt;iterator&gt; tf::SmallVectorTemplateCommon&lt; T, typename &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="167" column="33" bodyfile="taskflow/utility/small_vector.hpp" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a4b9db31beb2fe6aef612cd8ce248eb4a" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; tf::SmallVectorTemplateCommon&lt; T, typename &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="169" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1ac60fb9e83232f170a2f1af419054b30d" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>typedef const T&amp; tf::SmallVectorTemplateCommon&lt; T, typename &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="170" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1a4762cde1bfad65cb37752b4df255ddab" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* tf::SmallVectorTemplateCommon&lt; T, typename &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="171" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtf_1_1SmallVectorTemplateCommon_1ab2ca1203dec28f3d9c626c85b4f36448" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* tf::SmallVectorTemplateCommon&lt; T, typename &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="172" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtf_1_1SmallVectorTemplateCommon_1a793abe4bcf6dc77d4cc24d207a4958b8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>unsigned</type>
          </param>
        </templateparamlist>
        <type>struct</type>
        <definition>friend struct SmallVectorStorage</definition>
        <argsstring></argsstring>
        <name>SmallVectorStorage</name>
        <param>
          <type>SmallVectorStorage</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="115" column="15" bodyfile="taskflow/utility/small_vector.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1SmallVectorTemplateCommon_1a5ef73aff6ad53a6b0568fb4ed3530bf2" prot="private" static="no" mutable="no">
        <type>U</type>
        <definition>U tf::SmallVectorTemplateCommon&lt; T, typename &gt;::FirstEl</definition>
        <argsstring></argsstring>
        <name>FirstEl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="136" column="5" bodyfile="taskflow/utility/small_vector.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a4717897cb4e6fea34640801c69469355" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVectorTemplateCommon&lt; T, typename &gt;::SmallVectorTemplateCommon</definition>
        <argsstring>(size_t Size)</argsstring>
        <name>SmallVectorTemplateCommon</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="140" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a607fabb915c09ab97b1d80fb463e91fc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateCommon&lt; T, typename &gt;::grow_pod</definition>
        <argsstring>(size_t MinSizeInBytes, size_t TSize)</argsstring>
        <name>grow_pod</name>
        <param>
          <type>size_t</type>
          <declname>MinSizeInBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>TSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="142" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1ad541b208571c7244efc8fbe42b90d608" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tf::SmallVectorTemplateCommon&lt; T, typename &gt;::isSmall</definition>
        <argsstring>() const</argsstring>
        <name>isSmall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if this is a smallvector which has not had dynamic memory allocated for it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="148" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1aed80eb722677292606f4c4e3b14d9639" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateCommon&lt; T, typename &gt;::resetToSmall</definition>
        <argsstring>()</argsstring>
        <name>resetToSmall</name>
        <briefdescription>
<para>Put this vector in a state of being small. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="153" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1ae5fa1f3af9c829c120fd6ee9be5cf562" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tf::SmallVectorTemplateCommon&lt; T, typename &gt;::setEnd</definition>
        <argsstring>(T *P)</argsstring>
        <name>setEnd</name>
        <param>
          <type>T *</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="157" column="8" bodyfile="taskflow/utility/small_vector.hpp" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1ae101bcc51df9f276a517b7634cc885d0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::capacity_ptr</definition>
        <argsstring>()</argsstring>
        <name>capacity_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="182" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a6785a26fc28425df3fab4e06ccf436e3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::capacity_ptr</definition>
        <argsstring>() const</argsstring>
        <name>capacity_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="183" column="18" bodyfile="taskflow/utility/small_vector.hpp" bodystart="183" bodyend="183"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a5022deed40c9c9f983230c38d99658f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="175" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1af41e27410f801a6aef0e61173ed8c18d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="176" column="25" bodyfile="taskflow/utility/small_vector.hpp" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a59e18797630dc06cef6c2ae5acf591a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="177" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a0a34e20e970dce1f4e61893982886d49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="178" column="25" bodyfile="taskflow/utility/small_vector.hpp" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a83f50a1376ad1b3c828e89b9fa34b56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">reverse_iterator</ref></type>
        <definition>reverse_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="188" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a96c2d2979402cc76f84a76ff08720933" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="189" column="26" bodyfile="taskflow/utility/small_vector.hpp" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1ae26b374c3ca4f75054eb17ec85b26cf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">reverse_iterator</ref></type>
        <definition>reverse_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="190" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a411820e49d8ab402ac29c7537cd22049" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/iterator/reverse_iterator" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator tf::SmallVectorTemplateCommon&lt; T, typename &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="191" column="26" bodyfile="taskflow/utility/small_vector.hpp" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a4416437b41cf9d57a6ed6b061e1cc1e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type tf::SmallVectorTemplateCommon&lt; T, typename &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="193" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1ab79607f378fcf2fa8772f02c95a73073" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type tf::SmallVectorTemplateCommon&lt; T, typename &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="194" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a82d552c39834d18a03a5a7f62031aac3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tf::SmallVectorTemplateCommon&lt; T, typename &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Return the total number of elements in the currently allocated buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="197" column="10" bodyfile="taskflow/utility/small_vector.hpp" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a65c0541a7bf64e1ac4ae2a326d103cee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer tf::SmallVectorTemplateCommon&lt; T, typename &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a pointer to the vector&apos;s buffer, even if empty(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="200" column="11" bodyfile="taskflow/utility/small_vector.hpp" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a6d3b04be0f7fef50e88269934c4f95cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_pointer</type>
        <definition>const_pointer tf::SmallVectorTemplateCommon&lt; T, typename &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a pointer to the vector&apos;s buffer, even if empty(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="202" column="17" bodyfile="taskflow/utility/small_vector.hpp" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a42143086f104cda6e3d2ed2a4f7f9a29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::operator[]</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="204" column="20" bodyfile="taskflow/utility/small_vector.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1af77ae362f96acd803ed7577fb48b5efd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::operator[]</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="209" column="26" bodyfile="taskflow/utility/small_vector.hpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a2a1b3b20ba44906c4df269f6033c1f36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="214" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a0d17587a21aeba5f1230d183be131252" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="219" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a009d8ff154f5ce94202db6c0591ce9e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="224" column="13" bodyfile="taskflow/utility/small_vector.hpp" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVectorTemplateCommon_1a14a2f4a352c7ea71bea641125fa64c19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference tf::SmallVectorTemplateCommon&lt; T, typename &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="229" column="19" bodyfile="taskflow/utility/small_vector.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tf::SmallVectorTemplateBase&lt; T, IsPod&lt; T &gt;::value &gt;</label>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tf::SmallVectorBase</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tf::SmallVectorBase</label>
      </node>
    </collaborationgraph>
    <location file="taskflow/utility/small_vector.hpp" line="112" column="1" bodyfile="taskflow/utility/small_vector.hpp" bodystart="112" bodyend="233"/>
    <listofallmembers>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a009d8ff154f5ce94202db6c0591ce9e2" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a14a2f4a352c7ea71bea641125fa64c19" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a5022deed40c9c9f983230c38d99658f4" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af41e27410f801a6aef0e61173ed8c18d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a5d08aaf8e30cf35422fd5fc00a08365e" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>BeginX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a82d552c39834d18a03a5a7f62031aac3" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>capacity</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a11236e318bfb73ce440e6f29985b08f3" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>capacity_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae101bcc51df9f276a517b7634cc885d0" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6785a26fc28425df3fab4e06ccf436e3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a13c5c546448248a63e004725258f1ea3" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>CapacityX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a39c4f2406153fd86003f67136e096bf1" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>const_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab2ca1203dec28f3d9c626c85b4f36448" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>const_pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ac60fb9e83232f170a2f1af419054b30d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>const_reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae8618ae79998e522734cf4b15fa7956e" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>const_reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a65c0541a7bf64e1ac4ae2a326d103cee" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6d3b04be0f7fef50e88269934c4f95cd" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1adbfcf9d6ec0b239d48567a420a43b6f6" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>difference_type</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a538b6a18b5dfe80f650a2ada367a2050" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>empty</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a59e18797630dc06cef6c2ae5acf591a0" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0a34e20e970dce1f4e61893982886d49" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ac1a0459890042d10254b7be5dd7c1752" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>EndX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a5ef73aff6ad53a6b0568fb4ed3530bf2" prot="private" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>FirstEl</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a2a1b3b20ba44906c4df269f6033c1f36" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0d17587a21aeba5f1230d183be131252" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a607fabb915c09ab97b1d80fb463e91fc" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a39b8b0b14783568a42fc606dee073096" prot="protected" virt="non-virtual" ambiguityscope="tf::SmallVectorBase::"><scope>tf::SmallVectorTemplateCommon</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad541b208571c7244efc8fbe42b90d608" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>isSmall</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1acee58895a98d40868ce8f1a1ff284ab7" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab79607f378fcf2fa8772f02c95a73073" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>max_size</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a42143086f104cda6e3d2ed2a4f7f9a29" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af77ae362f96acd803ed7577fb48b5efd" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4762cde1bfad65cb37752b4df255ddab" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a83f50a1376ad1b3c828e89b9fa34b56d" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a96c2d2979402cc76f84a76ff08720933" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4b9db31beb2fe6aef612cd8ce248eb4a" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae26b374c3ca4f75054eb17ec85b26cf0" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a411820e49d8ab402ac29c7537cd22049" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1aed80eb722677292606f4c4e3b14d9639" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>resetToSmall</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a20b7a8544e963fe20fd8a139bddce658" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae5fa1f3af9c829c120fd6ee9be5cf562" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>setEnd</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4416437b41cf9d57a6ed6b061e1cc1e8" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>size</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ab2a8fa067f915dc2b67c6e0c33527081" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>size_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0af2aaae74afd35894e91e96e221f2b4" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>size_type</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a326c733a440cd9a1197bed0f75892152" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>SmallVectorBase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a793abe4bcf6dc77d4cc24d207a4958b8" prot="private" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>SmallVectorStorage</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4717897cb4e6fea34640801c69469355" prot="protected" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>SmallVectorTemplateCommon</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a858a012ef160a4d227a5c1ddb1f56472" prot="private" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>U</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad92ebf3b12a1cd9a7a80d5161cc4449b" prot="public" virt="non-virtual"><scope>tf::SmallVectorTemplateCommon</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
