<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1RandomPartitioner" kind="class" language="C++" prot="public">
    <compoundname>tf::RandomPartitioner</compoundname>
    <basecompoundref refid="classtf_1_1PartitionerBase" prot="public" virt="non-virtual">tf::PartitionerBase&lt; DefaultClosureWrapper &gt;</basecompoundref>
    <includes refid="partitioner_8hpp" local="no">taskflow/algorithm/partitioner.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename C</type>
        <defval><ref refid="structtf_1_1DefaultClosureWrapper" kindref="compound">DefaultClosureWrapper</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1RandomPartitioner_1a8bc25fd9379e4075847ed85efcddba0a" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float tf::RandomPartitioner&lt; C &gt;::_alpha</definition>
        <argsstring></argsstring>
        <name>_alpha</name>
        <initializer>{0.01f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="810" column="9" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtf_1_1RandomPartitioner_1a53866b6a5227064ba14d7ec40698f1c7" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float tf::RandomPartitioner&lt; C &gt;::_beta</definition>
        <argsstring></argsstring>
        <name>_beta</name>
        <initializer>{0.50f}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="811" column="9" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="811" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a5c64a1d794cece6ed226fb1c14632cbb" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="namespacetf_1a32d51425fa23cd0dc3518c16cf3bb6c0" kindref="member">PartitionerType</ref></type>
        <definition>static constexpr PartitionerType tf::RandomPartitioner&lt; C &gt;::type</definition>
        <argsstring>()</argsstring>
        <name>type</name>
        <briefdescription>
<para>queries the partition type (dynamic) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="689" column="36" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="689" bodyend="689"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a5ab28a71b47ce0ddef1764469d67153d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tf::RandomPartitioner&lt; C &gt;::RandomPartitioner</definition>
        <argsstring>()=default</argsstring>
        <name>RandomPartitioner</name>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="694" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a72fa7e849ffb0c9b6547edc719cbda50" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::RandomPartitioner&lt; C &gt;::RandomPartitioner</definition>
        <argsstring>(size_t sz)</argsstring>
        <name>RandomPartitioner</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>construct a dynamic partitioner with the given chunk size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="699" column="12" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="699" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a3158af2f133856f3620fad20decd8d40" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::RandomPartitioner&lt; C &gt;::RandomPartitioner</definition>
        <argsstring>(size_t sz, C &amp;&amp;closure)</argsstring>
        <name>RandomPartitioner</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>construct a random partitioner with the given chunk size and the closure </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="704" column="12" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="704" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a586f4233b5ace06598282b007b75ee7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::RandomPartitioner&lt; C &gt;::RandomPartitioner</definition>
        <argsstring>(float alpha, float beta)</argsstring>
        <name>RandomPartitioner</name>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
<para>constructs a random partitioner with the given parameters </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="711" column="3" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="711" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a36fcc5816916f621f0fb2eb9338b3376" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::RandomPartitioner&lt; C &gt;::RandomPartitioner</definition>
        <argsstring>(float alpha, float beta, C &amp;&amp;closure)</argsstring>
        <name>RandomPartitioner</name>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>float</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>C &amp;&amp;</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>constructs a random partitioner with the given parameters and the closure </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="716" column="3" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a67eea3b4ca4a2920a320d717ff3153aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tf::RandomPartitioner&lt; C &gt;::alpha</definition>
        <argsstring>() const</argsstring>
        <name>alpha</name>
        <briefdescription>
<para>queries the <computeroutput>alpha</computeroutput> value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="724" column="9" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="724" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a8f378443b152a7f0b7476a82982d12cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float tf::RandomPartitioner&lt; C &gt;::beta</definition>
        <argsstring>() const</argsstring>
        <name>beta</name>
        <briefdescription>
<para>queries the <computeroutput>beta</computeroutput> value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="729" column="9" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="729" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a7b283c21ca72666c7a12f0e82b28fde1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/utility/pair" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; size_t, size_t &gt;</type>
        <definition>std::pair&lt;size_t, size_t&gt; tf::RandomPartitioner&lt; C &gt;::chunk_size_range</definition>
        <argsstring>(size_t N, size_t W) const</argsstring>
        <name>chunk_size_range</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>W</declname>
        </param>
        <briefdescription>
<para>queries the range of chunk size </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>number of iterations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>W</parametername>
</parameternamelist>
<parameterdescription>
<para>number of workers </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="737" column="13" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="737" bodyend="750"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a6b1533ffdce413e11298ad28019d1012" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; void, F, size_t, size_t &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::RandomPartitioner&lt; C &gt;::loop</definition>
        <argsstring>(size_t N, size_t W, std::atomic&lt; size_t &gt; &amp;next, F &amp;&amp;func) const</argsstring>
        <name>loop</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>W</declname>
        </param>
        <param>
          <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt; &amp;</type>
          <declname>next</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="762" column="8" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="762" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1RandomPartitioner_1a25f583caec2a85ebfd33d5cfec12dc9a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_invocable_r_v&lt; bool, F, size_t, size_t &gt;, void &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void tf::RandomPartitioner&lt; C &gt;::loop_until</definition>
        <argsstring>(size_t N, size_t W, std::atomic&lt; size_t &gt; &amp;next, F &amp;&amp;func) const</argsstring>
        <name>loop_until</name>
        <param>
          <type>size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>W</declname>
        </param>
        <param>
          <type><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic</ref>&lt; size_t &gt; &amp;</type>
          <declname>next</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/algorithm/partitioner.hpp" line="787" column="8" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="787" bodyend="806"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to construct a random partitioner for scheduling parallel algorithms </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>closure wrapper type (default <ref refid="structtf_1_1DefaultClosureWrapper" kindref="compound">tf::DefaultClosureWrapper</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Similar to <ref refid="classtf_1_1DynamicPartitioner" kindref="compound">tf::DynamicPartitioner</ref>, the partitioner splits iterations into many partitions but each with a random chunk size in the range, <computeroutput>c = [alpha * N * W, beta * N * W]</computeroutput>. By default, <computeroutput>alpha</computeroutput> is <computeroutput>0.01</computeroutput> and <computeroutput>beta</computeroutput> is <computeroutput>0.5</computeroutput>, respectively.</para>
<para>In addition to partition size, the application can specify a closure wrapper for a random partitioner. A closure wrapper allows the application to wrapper a partitioned task (i.e., closure) with a custom function object that performs additional tasks. For example:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="cpp/atomic/atomic" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::atomic&lt;int&gt;</ref><sp/><ref refid="cpp/algorithm/count" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="classtf_1_1Taskflow" kindref="compound">tf::Taskflow</ref><sp/>taskflow;</highlight></codeline>
<codeline><highlight class="normal">taskflow.<ref refid="classtf_1_1FlowBuilder_1a3b132bd902331a11b04b4ad66cf8bf77" kindref="member">for_each_index</ref>(0,<sp/>100,<sp/>1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>[](){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/c/fprintf" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">printf</ref>(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>i);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="classtf_1_1RandomPartitioner" kindref="compound">tf::RandomPartitioner</ref>(0,<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>closure){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>before<sp/>invoking<sp/>the<sp/>partitioned<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>the<sp/>partitioned<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>closure();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>something<sp/>else<sp/>after<sp/>invoking<sp/>the<sp/>partitioned<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">executor.run(taskflow).wait();</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>tf::RandomPartitioner&lt; C &gt;</label>
        <link refid="classtf_1_1RandomPartitioner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tf::IsPartitioner</label>
      </node>
      <node id="2">
        <label>tf::PartitionerBase&lt; DefaultClosureWrapper &gt;</label>
        <link refid="classtf_1_1PartitionerBase"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>tf::RandomPartitioner&lt; C &gt;</label>
        <link refid="classtf_1_1RandomPartitioner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tf::IsPartitioner</label>
      </node>
      <node id="2">
        <label>tf::PartitionerBase&lt; DefaultClosureWrapper &gt;</label>
        <link refid="classtf_1_1PartitionerBase"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="taskflow/algorithm/partitioner.hpp" line="682" column="1" bodyfile="taskflow/algorithm/partitioner.hpp" bodystart="682" bodyend="812"/>
    <listofallmembers>
      <member refid="classtf_1_1RandomPartitioner_1a8bc25fd9379e4075847ed85efcddba0a" prot="private" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>_alpha</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a53866b6a5227064ba14d7ec40698f1c7" prot="private" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>_beta</name></member>
      <member refid="classtf_1_1PartitionerBase_1a9ff56f7150ee4ff42b5006942f9c4b52" prot="protected" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>_chunk_size</name></member>
      <member refid="classtf_1_1PartitionerBase_1a9c5a8d350a913bea4c63d350e2bc9d1b" prot="protected" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>_closure_wrapper</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a67eea3b4ca4a2920a320d717ff3153aa" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>alpha</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a8f378443b152a7f0b7476a82982d12cb" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>beta</name></member>
      <member refid="classtf_1_1PartitionerBase_1afa34299dea355738efa5684024d08215" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>chunk_size</name></member>
      <member refid="classtf_1_1PartitionerBase_1a481097aeb7ec62dcc23584eaa48cbce4" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>chunk_size</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a7b283c21ca72666c7a12f0e82b28fde1" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>chunk_size_range</name></member>
      <member refid="classtf_1_1PartitionerBase_1a929714296243b2c63e4f2baa2025d380" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>closure_wrapper</name></member>
      <member refid="classtf_1_1PartitionerBase_1a55a519288850c6cca366d1020bb22efe" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>closure_wrapper</name></member>
      <member refid="classtf_1_1PartitionerBase_1a99e23ce7c0faf3a932ab2b7ac51e58f4" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>closure_wrapper</name></member>
      <member refid="classtf_1_1PartitionerBase_1a2b6152f24c2a3d6e750349d02ecb4595" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>closure_wrapper_type</name></member>
      <member refid="classtf_1_1PartitionerBase_1ae70ae77c8d774ffd661924f425bcd6bf" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>is_default_wrapper_v</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a6b1533ffdce413e11298ad28019d1012" prot="private" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>loop</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a25f583caec2a85ebfd33d5cfec12dc9a" prot="private" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>loop_until</name></member>
      <member refid="classtf_1_1PartitionerBase_1a3edb7ab5e21326d2ba78680aeb965a83" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>operator()</name></member>
      <member refid="classtf_1_1PartitionerBase_1ad0037e70726a054527a923821ec2d95a" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>PartitionerBase</name></member>
      <member refid="classtf_1_1PartitionerBase_1a099464a339e09d9f6e4a59bec425c53a" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>PartitionerBase</name></member>
      <member refid="classtf_1_1PartitionerBase_1a9cf9f5400992c6d9bd4131b5af2b9e8e" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>PartitionerBase</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a5ab28a71b47ce0ddef1764469d67153d" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>RandomPartitioner</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a72fa7e849ffb0c9b6547edc719cbda50" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>RandomPartitioner</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a3158af2f133856f3620fad20decd8d40" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>RandomPartitioner</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a586f4233b5ace06598282b007b75ee7f" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>RandomPartitioner</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a36fcc5816916f621f0fb2eb9338b3376" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>RandomPartitioner</name></member>
      <member refid="classtf_1_1RandomPartitioner_1a5c64a1d794cece6ed226fb1c14632cbb" prot="public" virt="non-virtual"><scope>tf::RandomPartitioner</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
