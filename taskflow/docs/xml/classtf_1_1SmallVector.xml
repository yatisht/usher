<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classtf_1_1SmallVector" kind="class" language="C++" prot="public">
    <compoundname>tf::SmallVector</compoundname>
    <basecompoundref prot="public" virt="non-virtual">tf::SmallVectorImpl&lt; T &gt;</basecompoundref>
    <includes refid="small__vector_8hpp" local="no">taskflow/utility/small_vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>unsigned</type>
        <declname>N</declname>
        <defname>N</defname>
        <defval>2</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtf_1_1SmallVector_1a752752b1856c279b5ccb7c71106ddae0" prot="private" static="no" mutable="no">
        <type>SmallVectorStorage&lt; T, N &gt;</type>
        <definition>SmallVectorStorage&lt;T, N&gt; tf::SmallVector&lt; T, N &gt;::Storage</definition>
        <argsstring></argsstring>
        <name>Storage</name>
        <briefdescription>
<para>Inline space for elements which aren&apos;t stored in the base class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="929" column="22" bodyfile="taskflow/utility/small_vector.hpp" bodystart="929" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtf_1_1SmallVector_1a7948bf82d89a97740fc6ae7eb484a14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>()</argsstring>
        <name>SmallVector</name>
        <briefdescription>
<para>constructs an empty vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="936" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="936" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a092160eaf54d09827daaa8875c089226" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(size_t Size, const T &amp;Value=T())</argsstring>
        <name>SmallVector</name>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Value</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>constructs a vector with <computeroutput>Size</computeroutput> copies of elements with value <computeroutput>value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="942" column="12" bodyfile="taskflow/utility/small_vector.hpp" bodystart="942" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a0e0c9ea3b175d1e48e640434f9839380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItTy</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(ItTy S, ItTy E)</argsstring>
        <name>SmallVector</name>
        <param>
          <type>ItTy</type>
          <declname>S</declname>
        </param>
        <param>
          <type>ItTy</type>
          <declname>E</declname>
        </param>
        <briefdescription>
<para>constructs a vector with the contents of the range <computeroutput>[S, E)</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="952" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="952" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1ad45a8ae1e4b0d313e56d84787e3d9c91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>SmallVector</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
<para>constructs a vector with the contents of the initializer list <computeroutput>IL</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="965" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="965" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a7a3ca548c2b19ce570265b6dad2dfff7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(const SmallVector &amp;RHS)</argsstring>
        <name>SmallVector</name>
        <param>
          <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>constructs the vector with the copy of the contents of <computeroutput>RHS</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="972" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="972" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1acf74c15d1ba09f9d71e706859613c005" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(SmallVector &amp;&amp;RHS)</argsstring>
        <name>SmallVector</name>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>constructs the vector with the contents of <computeroutput>RHS</computeroutput> using move semantics </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="980" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="980" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1aa2a3549a42d052ecb9f9c348f547406e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
        <definition>const SmallVector&amp; tf::SmallVector&lt; T, N &gt;::operator=</definition>
        <argsstring>(const SmallVector &amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>replaces the contents with a copy of the contents of <computeroutput>RHS</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="988" column="21" bodyfile="taskflow/utility/small_vector.hpp" bodystart="988" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a66c2613642723060c21f0539d4a86b2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
        <definition>const SmallVector&amp; tf::SmallVector&lt; T, N &gt;::operator=</definition>
        <argsstring>(SmallVector &amp;&amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>replaces the contents with the contents of <computeroutput>RHS</computeroutput> using move semantics </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="996" column="21" bodyfile="taskflow/utility/small_vector.hpp" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a2507828c99bdc8d13cc57ec762689e2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tf::SmallVector&lt; T, N &gt;::SmallVector</definition>
        <argsstring>(SmallVectorImpl&lt; T &gt; &amp;&amp;RHS)</argsstring>
        <name>SmallVector</name>
        <param>
          <type>SmallVectorImpl&lt; T &gt; &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>constructs a vector with the contents of <computeroutput>RHS</computeroutput> using move semantics </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="1004" column="3" bodyfile="taskflow/utility/small_vector.hpp" bodystart="1004" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a06e0c4f610e6ede440b8f2ec38392781" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
        <definition>const SmallVector&amp; tf::SmallVector&lt; T, N &gt;::operator=</definition>
        <argsstring>(SmallVectorImpl&lt; T &gt; &amp;&amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type>SmallVectorImpl&lt; T &gt; &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
<para>replaces the contents with the contents of <computeroutput>RHS</computeroutput> using move semantics </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="1012" column="21" bodyfile="taskflow/utility/small_vector.hpp" bodystart="1012" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="classtf_1_1SmallVector_1a18276baf5b8c09d8452d198b5f568576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtf_1_1SmallVector" kindref="compound">SmallVector</ref> &amp;</type>
        <definition>const SmallVector&amp; tf::SmallVector&lt; T, N &gt;::operator=</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="cpp/utility/initializer_list" kindref="compound" external="/home/thuang295/Code/taskflow/doxygen/cppreference-doxygen-web.tag.xml">std::initializer_list</ref>&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
<para>replaces the contents with the copy of the contents of an initializer list <computeroutput>IL</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="taskflow/utility/small_vector.hpp" line="1020" column="21" bodyfile="taskflow/utility/small_vector.hpp" bodystart="1020" bodyend="1023"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>class to define a vector optimized for small array </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>threshold of the number of elements in the initial storage</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The class defines a C++ STL-styled vector (a variable-sized array) optimized for the case when the array is small. It contains some number of elements in-place, which allows it to avoid heap allocation when the actual number of elements is below that threshold. This allows normal <emphasis>small</emphasis> cases to be fast without losing generality for large inputs. All the methods in <ulink url="https://en.cppreference.com/w/cpp/container/vector">std::vector</ulink> can apply to this class.</para>
<para>The class is stripped from the LLVM codebase. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tf::SmallVectorImpl&lt; T &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="3">
        <label>tf::SmallVectorTemplateBase&lt; T, isPodLike &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tf::SmallVector&lt; T, N &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>tf::SmallVectorTemplateCommon&lt; T, typename &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>tf::SmallVectorImpl&lt; T &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>tf::SmallVectorBase</label>
      </node>
      <node id="3">
        <label>tf::SmallVectorTemplateBase&lt; T, isPodLike &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>tf::SmallVector&lt; T, N &gt;</label>
        <link refid="classtf_1_1SmallVector"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="taskflow/utility/small_vector.hpp" line="927" column="1" bodyfile="taskflow/utility/small_vector.hpp" bodystart="927" bodyend="1024"/>
    <listofallmembers>
      <member refid="classtf_1_1SmallVectorImpl_1a7701c640b693502323a27937ad2433f4" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a945b8b7e14f3d535754323d85848f00c" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a63bb5bb28bc13af096f7d0f750ca065d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>append</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ac70567cd0a62080782399d6031f42fb3" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>assign</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a3aac17a8dd8a5b05024e3bc3e588bf78" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>assign</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a009d8ff154f5ce94202db6c0591ce9e2" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a14a2f4a352c7ea71bea641125fa64c19" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a5022deed40c9c9f983230c38d99658f4" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af41e27410f801a6aef0e61173ed8c18d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>begin</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a5d08aaf8e30cf35422fd5fc00a08365e" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>BeginX</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a82d552c39834d18a03a5a7f62031aac3" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>capacity</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a11236e318bfb73ce440e6f29985b08f3" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>capacity_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae101bcc51df9f276a517b7634cc885d0" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6785a26fc28425df3fab4e06ccf436e3" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>capacity_ptr</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a13c5c546448248a63e004725258f1ea3" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>CapacityX</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0c4d7c6d68cdab50dd2e263dcb9338a5" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>clear</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0214b0ea02db158851fdc27c726eb5c6" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>const_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab2ca1203dec28f3d9c626c85b4f36448" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>const_pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ac60fb9e83232f170a2f1af419054b30d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>const_reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae8618ae79998e522734cf4b15fa7956e" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>const_reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a65c0541a7bf64e1ac4ae2a326d103cee" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a6d3b04be0f7fef50e88269934c4f95cd" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>data</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a00ebcf9e81eed0b433be97131fd3d1d1" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>destroy_range</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1adbfcf9d6ec0b239d48567a420a43b6f6" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>difference_type</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a917970b8ad88f2782c0fdf610422229e" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>emplace_back</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a538b6a18b5dfe80f650a2ada367a2050" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>empty</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a59e18797630dc06cef6c2ae5acf591a0" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0a34e20e970dce1f4e61893982886d49" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>end</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ac1a0459890042d10254b7be5dd7c1752" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>EndX</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a84bab9df70d6e59f3078da08280022c8" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>erase</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a5d28ee2577dc8da6d096235a3c67b587" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>erase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a2a1b3b20ba44906c4df269f6033c1f36" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a0d17587a21aeba5f1230d183be131252" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>front</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1ab804c48d808741a114c698847860d64c" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>grow</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a607fabb915c09ab97b1d80fb463e91fc" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a39b8b0b14783568a42fc606dee073096" prot="protected" virt="non-virtual" ambiguityscope="tf::SmallVectorBase::"><scope>tf::SmallVector</scope><name>grow_pod</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ad0cd1dc5bdc5e85bd891d5e8cbf04aa6" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a67186df9203fbf6da88bb868768543e3" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1adef89d46d895560d98b9d2a8d5cf58c7" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a2f1549f06d7d5899e5e5636c2b5836d2" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a183b0273245a9e08281ecf3fcdd6c326" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>insert</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad541b208571c7244efc8fbe42b90d608" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>isSmall</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a56906d9b3af4322205884dccccda4557" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>iterator</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ab79607f378fcf2fa8772f02c95a73073" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>max_size</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a0d3239c335aaa933165c3da83e6544da" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator!=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1af696392bdb0d114a8ead523260045e29" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator&lt;</name></member>
      <member refid="classtf_1_1SmallVector_1aa2a3549a42d052ecb9f9c348f547406e" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVector_1a66c2613642723060c21f0539d4a86b2d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVector_1a06e0c4f610e6ede440b8f2ec38392781" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVector_1a18276baf5b8c09d8452d198b5f568576" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1aaec66ca9e10e70d11c194eecec877a1e" prot="public" virt="non-virtual" ambiguityscope="tf::SmallVectorImpl::"><scope>tf::SmallVector</scope><name>operator=</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a9d7b77ff6197e5c30cd0c267196f1ff6" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator==</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a42143086f104cda6e3d2ed2a4f7f9a29" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1af77ae362f96acd803ed7577fb48b5efd" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>operator[]</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4762cde1bfad65cb37752b4df255ddab" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>pointer</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1aaa3d3554c2ae0be47eed43c324e5e73b" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>pop_back</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a787679e464d7605da42cfa51c932b357" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>pop_back_val</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a6b7c01c4c054379358315a1aac0d49a7" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>push_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1a6509b362398934d6ceed4a74ad0e6547" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>push_back</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a83f50a1376ad1b3c828e89b9fa34b56d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a96c2d2979402cc76f84a76ff08720933" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>rbegin</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4b9db31beb2fe6aef612cd8ce248eb4a" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>reference</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae26b374c3ca4f75054eb17ec85b26cf0" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a411820e49d8ab402ac29c7537cd22049" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>rend</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a50e86216100abce0a02f758ec48dec26" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>reserve</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1aed80eb722677292606f4c4e3b14d9639" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>resetToSmall</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a3fd39cea3aa24104f31f051cc858ae31" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>resize</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ab4b71ea99487d0561849b4ed9c32f493" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>resize</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a20b7a8544e963fe20fd8a139bddce658" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>reverse_iterator</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1aa67a4c5e467bb19b1f16960854a0b010" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>set_size</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ae5fa1f3af9c829c120fd6ee9be5cf562" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>setEnd</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4416437b41cf9d57a6ed6b061e1cc1e8" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>size</name></member>
      <member refid="classtf_1_1SmallVectorBase_1ab2a8fa067f915dc2b67c6e0c33527081" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>size_in_bytes</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ad777bf745a771240340b41ef95b23f94" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>size_type</name></member>
      <member refid="classtf_1_1SmallVector_1a7948bf82d89a97740fc6ae7eb484a14d" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1a092160eaf54d09827daaa8875c089226" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1a0e0c9ea3b175d1e48e640434f9839380" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1ad45a8ae1e4b0d313e56d84787e3d9c91" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1a7a3ca548c2b19ce570265b6dad2dfff7" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1acf74c15d1ba09f9d71e706859613c005" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVector_1a2507828c99bdc8d13cc57ec762689e2b" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVector</name></member>
      <member refid="classtf_1_1SmallVectorBase_1a326c733a440cd9a1197bed0f75892152" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVectorBase</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a7e9e271548156643b2a6066472a6901c" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVectorImpl</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1adc772391e02b84d14f4c5513542b29a9" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVectorTemplateBase</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1a4717897cb4e6fea34640801c69469355" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>SmallVectorTemplateCommon</name></member>
      <member refid="classtf_1_1SmallVector_1a752752b1856c279b5ccb7c71106ddae0" prot="private" virt="non-virtual"><scope>tf::SmallVector</scope><name>Storage</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1ac79ba4c3607daede2f497cb7f14cc3cb" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>swap</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1ab8738fe3287f4ef437fe7363e8ae2d60" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>uninitialized_copy</name></member>
      <member refid="classtf_1_1SmallVectorTemplateBase_1adf1b336ce5b5f404de1bb43c354fe1dd" prot="protected" virt="non-virtual"><scope>tf::SmallVector</scope><name>uninitialized_move</name></member>
      <member refid="classtf_1_1SmallVectorTemplateCommon_1ad92ebf3b12a1cd9a7a80d5161cc4449b" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>value_type</name></member>
      <member refid="classtf_1_1SmallVectorImpl_1a4ac1132c5abed54299b9c05f5a6c3a5e" prot="public" virt="non-virtual"><scope>tf::SmallVector</scope><name>~SmallVectorImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
