namespace tf {

/** @page contributors Contributors

@tableofcontents

@section ThankYouForDevelopingTaskflow Thank You for Developing Taskflow

We are grateful for the following contributors (alphabetic order) to the %Taskflow project:

  @li <a href="https://github.com/Neumann-A">Alexander Neumann</a>: made %Taskflow importable from external CMake projects
  @li <a href="https://github.com/andatr">Andatr</a>: improved the hashing performance in freelist
  @li <a href="https://github.com/Anesthesia4">Anesthesia4</a>: added unit tests for parallel-transform algorithms  
  @li <a href="https://antonysigma.github.io/">Antony Chan</a>: added unit tests for parallel-transform algorithms  @li <a href="https://github.com/aolofsson">Andreas Olofsson</a>: supported the %Taskflow project through the DARPA IDEA program
  @li <a href="https://github.com/boxerab">Aaron Boxer</a>: fixed compiler warning caused by unsigned-signed conversion
  @li <a href="https://github.com/bangerth">Wolfgang Bangerth</a>: fixed the redudndant `nullptr` check
  @li <a href="https://github.com/bkmgit">Benson Muite</a>: fixed compilation errors of the wavefront benchmark
  @li <a href="https://cheng-hsiang-chiu.github.io/">Cheng-Hsiang Chiu</a>: improved the documentation, fixes typos, and test code examples
  @li <a href="https://www.linkedin.com/in/chandrahas-pundru-04552916a/">Chandrahas Pundru</a>: implemented cancellation of submitted taskflows
  @li <a href="https://github.com/clin99">Chun-Xun Lin</a>: co-created the %Taskflow project and designed the core functionalities
  @li <a href="https://github.com/conradjones">Conrad Jones</a>: added cancellation query support from the runtime task
  @li <a href="https://github.com/craffael">Craffael</a>: improved the CMake to allow relocatable installation
  @li <a href="https://github.com/danielytics">Dan Kersten</a>: designed an interface to allow customizing worker behaviors upon their creation in an executor
  @li <a href="https://github.com/musteresel">Daniel Jour</a>: improved cmake through out-of-tree builds and designed the semaphore interface
  @li <a href="https://github.com/dian-lun-lin">Dian-Lun Lin</a>: applied %Taskflow to win the champion award of the IEEE HPEC 2020 %Graph Challenge 
  @li <a href="https://github.com/egorodet">Evgeny Gorodetskiy</a>: fixed task queue compilation error due to wrong macro locations 
  @li <a href="https://github.com/fstrugar">Filip Strugar</a>: fixed the bugs in fire-and-get taskflow execution and parallel algorithms
  @li <a href="https://github.com/ForgeMistress">Foge Mistress</a>: helped design the executor interface to avoid over-subscribed threads
  @li <a href="https://github.com/fran6co">Francisco Facioni</a>: improved the interface of %Taskflow exception support through macro
  @li <a href="https://github.com/largerock">George Price</a>: improved the documentation pages and fixed several typos
  @li <a href="https://github.com/totalgee">Glen Fraser</a>: contributed to the design of executor and threadpool
  @li <a href="https://github.com/guannan-git">Guannan Guo</a>: benchmarked different scheduling algorithms and architectures
  @li <a href="https://github.com/hjxy2012">Hjxy2012</a>: fixed the compilation error in nvcc due to removed features in C++17
  @li <a href="https://github.com/xq114">Hoildkv</a>: fixed documentation errors in explaining the observer interface of executor
  @li <a href="https://ossia.io/">Jean Michael</a>: integrated %Taskflow to the OSSIA project and reported feedback in comparison to TBB
  @li <a href="https://jw-liu.xyz/">Jiawei Liu</a>: fixed typos in the documentation
  @li <a href="https://github.com/juliangilbey">Junlian Gilbey</a>: added the explicit link to libatomic on some archs 
  @li <a href="https://github.com/junlinmessi">Junlin Huang</a>: fixed the erroneous template argument in serializer and deserializer
  @li <a href="https://github.com/KingDuckZ">KingDuckZ</a>: helped discover memory leak in the object pool
  @li <a href="https://github.com/Levi-Armstrong">Levi Armstrong</a>: added threads target to the CMake file as an interface library
  @li <a href="https://github.com/LilyWangL">Lily</a>: helped added %Taskflow to the MS vcpkg project
  @li <a href="https://github.com/longpractice">Longpractice</a>: fixed the MS compilation error for launch-loop algorithm
  @li <a href="https://github.com/burgholzer">Lukas Burgholzer</a>: improved the MAC OS compatibility with the standard variant library
  @li <a href="https://github.com/ljwo">Lukasz Wojakowski</a>: identified delayed execution bug in module task
  @li <a href="https://github.com/lrm77">Luke Majors</a>: implemented a sanitizer algorithm to sanitize deadlock control-flow tasks
  @li <a href="https://github.com/McKayMower">McKay Mower</a>: implemented a sanitizer algorithm to sanitize non-reachable control-flow tasks
  @li <a href="https://github.com/mratsim">Mamy Ratsimbazafy</a>: fixed the reference link error in the documentation
  @li <a href="https://github.com/Croolman">Martin Krutak</a>: fixed min/max macros expansion error when windows.h header is included
  @li <a href="https://ece.illinois.edu/about/directory/faculty/mdfwong">Martin Wong</a>: supported the %Taskflow project development through NSF and DARPA grant
  @li <a href="https://github.com/mpowelson">Matthew Powelson:</a> fixed the installation error in the cmake script
  @li <a href="https://github.com/Maxi-git">Maxi-git:</a> improved the scheduler by removing redundant iterations in the busy stealing loop
  @li <a href="https://github.com/Notallthatevil">Nate</a>: fixed the compilation error of priority task queue on MS platforms
  @li <a href="https://github.com/NanXiao">Nan Xiao</a>: fixed compilation error of unit tests on the Arch platform
  @li <a href="https://github.com/netcan">Netcan</a>: designed a domain-specific graph language to simplify the creation of taskflows
  @li <a href="https://github.com/N3VIN">Nevin</a>: fixed the macro crash in windows
  @li <a href="https://www.linkedin.com/in/ojassm25/">Ojas Mithbavkar</a>: implemented cancellation of submitted taskflows
  @li <a href="https://github.com/pancpp">Pancpp</a>: removed hard-coded installation prefix with relative install path
  @li <a href="https://github.com/paolobolzoni">Paolo Bolzoni</a>: helped remove extraneous semicolons to suppress extra warning
  @li <a href="https://github.com/patrikhuber">Patrik Huber</a>: fixed the typos of documentation
  @li <a href="https://github.com/p12tic">Povilas Kanapickas</a>: helped design a new scheduling invariant to avoid busy stealing
  @li <a href="https://github.com/qbojj">qbojj</a>: helped fixed documentation errors related to dependent asynchronous tasking
  @li <a href="https://github.com/PhrygianGates">Zizheng Xiong</a>: added data-parallel programming models through GSoC 2022
  @li <a href="https://github.com/Pursche">Pursche</a>: fixed compilation warning on MSVC
  @li <a href="https://github.com/remz1337">Remi Bedard-Couture</a>: added big object compilation support on MSVC
  @li <a href="https://github.com/doocman">Robin Soderholm</a>: fixed the runtime error of %cudaEvent destructor
  @li <a href="https://github.com/HRXWEB">Ruixin Huang</a>: fixed bugs in conditional tasking documentation
  @li <a href="https://soonhokong.github.io/">Soonho Kong</a>: fixed the compilation warning of unused lambda variables
  @li <a href="https://github.com/Milerius">Sztergbaum Roman</a>: improved the CMake file to remove global setting
  @li <a href="https://github.com/tjhei">Timo Heister</a>: fixed documentation typos and integrated %Taskflow to the deal.ii project
  @li <a href="https://github.com/trevor-vincent">Trevor Vincent</a>: added support for the Intel C++ compiler (v19+)
  @li <a href="https://tsung-wei-huang.github.io/">Tsung-Wei Huang</a>: created the %Taskflow project and designed the core functionalities
  @li <a href="https://www.linkedin.com/in/vedanta-krishna-bhutani-96035317a/">Vedanta Krishna Bhutani</a>: implemented cancellation of submitted taskflows
  @li <a href="https://github.com/Endilll">Vlad Serebrennikov</a>: implemented the interface to attach user data in a task
  @li <a href="https://vedran.miletic.net/">Vedran Miletic</a>: patched the OS detection utility to include Solaris and illumos
  @li <a href="http://blog.mosra.cz/">Vladimir VonÂ­drus</a>: helped modernize %Taskflow handbook using m.css and make pages mobile-friendly
  @li <a href="https://github.com/innermous">Vladyslav</a>: fixed comment errors in README.md and examples
  @li <a href="https://github.com/qq978358810">WiCyn</a>: identified a bug in scheduling condition tasks during run-n
  @li <a href="https://github.com/Ya-Za">Yasin Zamani</a>: benchmarked the parallel sort with the TBB baseline
  @li <a href="http://yibolin.com/">Yibo Lin</a>: helped design the interface of conditional tasking
  @li <a href="https://github.com/QiuYilin">Yilin Qiu</a>: helped implement the dependency removal methods in %Taskflow
  @li <a href="https://github.com/weilewei">Weile</a>: helped added %Taskflow to the compiler explorer interface
  @li <a href="https://guozz.cn/">Zizheng Guo</a>: applied %Taskflow to speed up VLSI timing analysis and shared his feedback


Please @ContactUs if we forgot your name!

@section ThankYouForUsingTaskflow Thank You for Using Taskflow

We are grateful for the following organizations and projects that are using %Taskflow:

@li <a href="https://github.com/OpenTimer/OpenTimer">OpenTimer</a>: A high-performance timing analysis tool for VLSI designs
@li <a href="https://ossia.io/">OSSIA</a>: An open-source software system for interactive applications
@li <a href="https://novuscore.org/">NovousCore</a>: An emulating project for World of Warcraft (Wrath of the Lich King)
@li <a href="https://www.dealii.org/">deal.II</a>: A C++ software library to support the creation of finite element code
@li <a href="https://www.mydatamodels.com/">MyDataModels</a>: An online platform for self-service machine learning for small data
@li <a href="https://www.vlsisystemdesign.com/">VSD</a>: An online education platform for VLSI system design using open-source software 
@li <a href="https://theopenroadproject.org/">OpenRoad</a>: A 24-hour Fully Automatic Layout Generation Flow
@li <a href="https://github.com/open-ephys">Open Ephys</a>: Open-source tools for neuroscience research
@li <a href="https://github.com/masc-ucsc/livehd">LiveHD</a>: An infrastructure designed for Live Hardware Development
@li <a href="https://rosindustrial.org/ric">ROS-Industrial Consortium</a>: Organization for advanced factory automation
@li <a href="http://www.revealtech.ai/">revealtech.ai</a>: Mobile application with focused and intelligent analytics on the edge
@li <a href="https://intsights.com/">PyRepScan</a>: A Git Repository Leaks Scanner Python Library written in C++
@li <a href="https://github.com/dian-lun-lin/SNIG">SNIG</a>: An open-source inference engine for large sparse deep neural network
@li <a href="https://github.com/The-OpenROAD-Project/OpenPhySyn">OpenPhySyn</a>: A plugin-based physical synthesis optimization kit as part of the OpenRoad flow
@li <a href="https://github.com/LPMP/LPMP">LPMP</a>: A C++ framework for developing scalable Lagrangian decomposition solvers 
@li <a href="https://github.com/GrokImageCompression/grok">GROK</a>: World's Leading Open Source JPEG 2000 Codec
@li <a href="https://github.com/Ravbug/RavEngine">RavEngine</a>: A fast, easy to use C++17 3D game library for modern computers
@li <a href="https://github.com/erri120/rpgmpacker">RPGMPacker</a>: CLI program for packaging RPG Maker games in an automated build/deploy pipeline.
@li <a href="https://github.com/JayXon/Leanify">Leanify</a>: A lightweight lossless file minifier and optimizer
@li <a href="https://www.xanadu.ai/">Xanadu AI</a>: Accelerate simulation using quantum computing
@li <a href="https://github.com/heal-research/operon">Operon</a>: Modern C++ framework for Symbolic Regression using Genetic Programming 
@li <a href="https://github.com/ExplosionEngine/Explosion">Explosion</a>: A modern cross-platform game engine
@li <a href="https://github.com/coder137/build_in_cpp">BuildCC</a>: An alternative to Makefiles while using the feature rich C++ language.
@li <a href="https://github.com/JetBrains-Research/spla">SPLA</a>: Generalized sparse linear algebra framework for multi-GPU computations.
@li <a href="https://github.com/egorodet/MethaneKit">MethaneKit</a>: Modern 3D graphics rendering abstraction API and cross-platform application framework
@li <a href="https://github.com/GameTechDev/XeGTAO">XeGTAO</a>: Implementation of the Practical Real-time Strategies for Accurate Indirect Occlusion
@li <a href="https://github.com/fragcolor-xyz/chainblocks">ChainBlocks</a>: A scripting tool to build tools
@li <a href="https://github.com/maxbachmann/RapidFuzz">RapidFuxx</a>: Rapid fuzzy string matching in Python using various string metrics
@li <a href="https://github.com/KomodoPlatform/atomicDEX-Desktop">AtomicDEX</a>: Secure wallet and decentralized exchange rolled into one application
@li <a href="https://github.com/intel-ai/oox">OOX</a>: Out-of-order task execution library in modern C++
@li <a href="https://reagent.ai/">ReAgent</a>: An open end-to-end platform for applied reinforcement learning  developed and used at Facebook
@li <a href="https://github.com/GauravDawra/Beast">Beast-Build</a>: A build system built for speed and power 
@li <a href="https://gdimitrak.github.io/papers/taskflow-tcad22.pdf">Gate Sizing</a>: A task-parallel gate sizing algorithm for VLSI design automation
@li <a href="https://github.com/fragcolor-xyz/shards">Shards</a>: A scripting tool to build tools
@li <a href="https://github.com/rapidsai/cucim">RAPIDS CuCim</a>: An open-source, accelerated computer vision and image processing software library
@li <a href="https://github.com/tesseract-robotics/tesseract">Tesseract Robotics</a>: Lightweight robotics motion planning environment
@li <a href="https://github.com/NcStudios/NcEngine">NcEngine</a>: 3D game engine written in C++20 targeting Windows
@li <a href="https://www.xilinx.com/products/design-tools/vivado.html">AMD Vivao</a>: AMD's software synthesis suite for hardware designs
@li <a href="https://www.moduleworks.com/">ModuleWorks</a>: Industry-proven ModuleWorks CAD/CAM technology into software solutions
@li <a href="https://github.com/samayala22/tinyvlm">TinyVML</a>: High-performance CPU/GPU Potential Flow Solver

... more at [GitHub](https://github.com/search?q=taskflow+c%2B%2B&type=commits).

Please @ContactUs if we forgot your name!

*/

}


