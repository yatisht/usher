namespace tf {

/** @page SubflowTasking Subflow Tasking

It is very common for a parallel program to 
spawn task dependency graphs at runtime.
In %Taskflow, we call this <em>subflow tasking</em>.

@tableofcontents

@section CreateASubflow Create a Subflow

%Subflow tasks are those created during the execution of a graph.
These tasks are spawned from a parent task and are grouped together to a 
@em subflow dependency graph.
To create a subflow, emplace a callable 
that takes an argument of type tf::Subflow.
A tf::Subflow object will be created and forwarded to
the execution context of the task.
All methods you find in tf::Taskflow are applicable for tf::Subflow.

@code{.cpp}
 1: tf::Taskflow taskflow;
 2: tf::Executor executor;
 3:
 4: tf::Task A = taskflow.emplace([] () {}).name("A");  // static task A
 5: tf::Task C = taskflow.emplace([] () {}).name("C");  // static task C
 6: tf::Task D = taskflow.emplace([] () {}).name("D");  // static task D
 7:
 8: tf::Task B = taskflow.emplace([] (tf::Subflow& subflow) { 
 9:   tf::Task B1 = subflow.emplace([] () {}).name("B1");  // subflow task B1
10:   tf::Task B2 = subflow.emplace([] () {}).name("B2");  // subflow task B2
11:   tf::Task B3 = subflow.emplace([] () {}).name("B3");  // subflow task B3
12:   B1.precede(B3);  // B1 runs before B3
13:   B2.precede(B3);  // B2 runs before B3
14: }).name("B");
15:
16: A.precede(B);  // B runs after A
17: A.precede(C);  // C runs after A
18: B.precede(D);  // D runs after B
19: C.precede(D);  // D runs after C
20:
21: executor.run(taskflow).get();  // execute the graph to spawn the subflow
@endcode

<!--@image html images/subflow_join.svg width=35%-->

@parblock
@dotfile images/subflow-join.dot
@endparblock

Debrief:
@li Lines 1-2 create a taskflow and an executor
@li Lines 4-6 create three tasks, A, C, and D
@li Lines 8-14 create a task B that spawns a task dependency graph of three tasks B1, B2, and B3
@li Lines 16-19 add dependencies among A, B, C, and D
@li Line 21 submits the graph to an executor and waits until it finishes

Lines 8-14 are the main block to enable subflow tasking at task B.
The runtime will create a tf::Subflow passing it to task B,
and spawn a dependency graph as described by the associated callable.
This new subflow graph will be added to the topology of its parent task B.

@section RetainASubflow Retain a Subflow

By default, a tf::Subflow automatically clears its internal task graph once it is joined. After a subflow joins, its structure and associated resources are no longer accessible. This behavior is designed to reduce memory usage, particularly in applications that recursively spawn many subflows.
For applications that require post-processing, such as visualizing the subflow through tf::Taskflow::dump, 
users can disable this default cleanup behavior by calling tf::Subflow::retain on `true`.
This instructs the runtime to retain the subflow's task graph even after it has joined, enabling further inspection or visualization.

@code{.cpp}
tf::Taskflow taskflow;
tf::Executor executor;

taskflow.emplace([&](tf::Subflow& sf){
  sf.retain(true);  // retain the subflow after join for visualization
  auto A = sf.emplace([](){ std::cout << "A\n"; });
  auto B = sf.emplace([](){ std::cout << "B\n"; });
  auto C = sf.emplace([](){ std::cout << "C\n"; });
  A.precede(B, C);  // A runs before B and C
});  // subflow implicitly joins here

executor.run(taskflow).wait();

// The subflow graph is now retained and can be visualized using taskflow.dump(...)
taskflow.dump(std::cout);
@endcode

@section JoinASubflow Join a Subflow Explicitly

By default, a subflow *implicitly* joins its parent task when execution leaves its context. 
All terminal nodes (i.e., nodes with no outgoing edges) in the subflow are guaranteed to precede the parent task. 
Upon joining, the subflow's task graph and associated resources are automatically cleaned up. 
If your application needs to access variables defined within the subflow after it joins, 
you can explicitly join the subflow and handle post-processing accordingly. 
A common use case is parallelizing recursive computations such as the Fibonacci sequence:

@code{.cpp}
int spawn(int n, tf::Subflow& sbf) {
  if (n < 2) return n;
  int res1, res2;
  sbf.emplace([&res1, n] (tf::Subflow& sbf) { res1 = spawn(n - 1, sbf); } );
  sbf.emplace([&res2, n] (tf::Subflow& sbf) { res2 = spawn(n - 2, sbf); } );
  sbf.join();    // join to materialize the subflow immediately
  return res1 + res2;
}
  
taskflow.emplace([&res] (tf::Subflow& sbf) { 
  res = spawn(5, sbf);  
});

executor.run(taskflow).wait();
@endcode

The code above computes the fifth Fibonacci number using recursive subflow.
Calling tf::Subflow::join @em immediately materializes the subflow by executing all associated
tasks to recursively compute Fibonacci numbers.
The taskflow graph is shown below:

<!-- @image html images/fibonacci_10.svg width=100% -->
@dotfile images/fibonacci_7.dot

@attention
Using tf::Subflow to implement recursive parallelism like finding Fibonacci numbers may not be 
as efficient as tf::Runtime due to additional task graph overhead. 
For more details, readers can refer to @ref fibonacci.


@section CreateANestedSubflow Create a Nested Subflow

A subflow can be nested or recursive.
You can create another subflow from the execution of a subflow and so on.

@code{.cpp}
 1: tf::Taskflow taskflow;
 2:
 3: tf::Task A = taskflow.emplace([] (tf::Subflow& sf){
 4:   std::cout << "A spawns A1 & subflow A2\n";
 5:   tf::Task A1 = sf.emplace([] () {
 6:     std::cout << "subtask A1\n";
 7:   }).name("A1");
 8:
 9:   tf::Task A2 = sf.emplace([] (tf::Subflow& sf2){
10:     std::cout << "A2 spawns A2_1 & A2_2\n";
11:     tf::Task A2_1 = sf2.emplace([] () {
12:       std::cout << "subtask A2_1\n";
13:     }).name("A2_1");
14:     tf::Task A2_2 = sf2.emplace([] () {
15:       std::cout << "subtask A2_2\n";
16:     }).name("A2_2");
17:     A2_1.precede(A2_2);
18:   }).name("A2");
19:   A1.precede(A2);
20: }).name("A");
21:
22: // execute the graph to spawn the subflow
23: tf::Executor().run(taskflow).get();
@endcode

<!-- @image html images/nested_subflow.svg  -->
@dotfile images/nested_subflow.dot

Debrief:
@li Line 1 creates a taskflow object
@li Lines 3-20 create a task to spawn a subflow of two tasks A1 and A2
@li Lines 9-18 spawn another subflow of two tasks A2_1 and A2_2 out of its parent task A2
@li Lines 23 runs the defined taskflow graph 

@attention
To properly visualize subflows, you must call tf::Subflow::retain on each subflow and execute the taskflow once to ensure all associated subflows are spawned.

*/

}

